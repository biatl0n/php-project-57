<?php

namespace Tests\Feature;

use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;
use App\Models\Label;

class LabelTest extends TestCase
{
    /**
     * A basic feature test example.
     */
    use RefreshDatabase;

    protected User $user;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        Label::factory()->count(2)->make();
        $this->user = User::factory()->create();
    }

    public function testIndex()
    {
        $response = $this->get(route('labels.index'));
        $response->assertStatus(200);
    }

    public function testCreatePageWithAuth()
    {
        $response = $this->actingAs($this->user)->get(route('labels.create'));
        $response->assertStatus(200);
    }

    public function testCreateWithAuth()
    {
        $data = Label::factory()->make()->toArray();
        $response = $this->actingAs($this->user)->post(route('labels.store'), $data);
        $response->assertRedirect(route('labels.index'));
        $this->assertDatabaseHas('labels', $data);
    }

    public function testCreatePageWithoutAuth()
    {
        $response = $this->get(route('labels.create'));
        $response->assertStatus(403);
    }

    public function testCreateWithoutAuth()
    {
        $data = Label::factory()->make()->toArray();
        $response = $this->post(route('labels.store'), $data);
        $response->assertStatus(403);
        $this->assertDatabaseMissing('labels', $data);
    }

    public function testEditPageWithAuth()
    {
        $label = Label::factory()->create();
        $response = $this->actingAs($this->user)->get(route('labels.edit', [$label]));
        $response->assertStatus(200);
    }

    public function testEditWithAuth()
    {
        $label = Label::factory()->create();
        $data = Label::factory()->make()->toArray();
        $response = $this->actingAs($this->user)->patch(route('labels.update', [$label]), $data);
        $response->assertRedirect(route('labels.index'));
        $response->assertSessionHasNoErrors();
        $this->assertDatabaseHas('labels', $data);
    }

    public function testEditPageWithoutAuth()
    {
        $label = Label::factory()->create();
        $response = $this->get(route('labels.edit', [$label]));
        $response->assertStatus(403);
    }

    public function testEditWithoutAuth()
    {
        $label = Label::factory()->create();
        $data = Label::factory()->make()->toArray();
        $response = $this->patch(route('labels.update', [$label]), $data);
        $response->assertStatus(403);
        $this->assertDatabaseMissing('labels', $data);
    }

    public function testDestroyWithAuth()
    {
        $label = Label::factory()->create();
        $response = $this->actingAs($this->user)->delete(route('labels.destroy', [$label]));
        $response->assertSessionHasNoErrors();
        $response->assertRedirect(route('labels.index'));
        $this->assertDatabaseMissing('labels', $label->only('id'));
    }

    public function testDestroyWithoutAuth()
    {
        $label = Label::factory()->create();
        $response = $this->delete(route('labels.destroy', [$label]));
        $response->assertSessionHasNoErrors();
        $response->assertStatus(403);
        $this->assertDatabaseHas('labels', $label->only('name'));
    }
}

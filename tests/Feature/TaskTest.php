<?php

namespace Tests\Feature;

use Database\Factories\TaskFactory;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;
use App\Models\User;
use App\Models\Task;
use App\Models\TaskStatus;

class TaskTest extends TestCase
{
    /**
     * A basic feature test example.
     */
    use RefreshDatabase;

    protected User $user;
    protected User $alienUser;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        Task::factory()->count(2)->make();
        $this->user = User::factory()->create();
        $this->alienUser = User::factory()->create();
    }

    public function testIndex()
    {
        $response = $this->get(route('tasks.index'));
        $response->assertStatus(200);
    }

    public function testCreateWithAuth()
    {
        $taskData = Task::factory()->make(['created_by_id' => $this->user->id])->toArray();
        $response = $this->actingAs($this->user)->post(route('tasks.store'), $taskData);
        $response->assertRedirect(route('tasks.index'));
        $this->assertDatabaseHas('tasks', array_merge($taskData, ['created_by_id' => $this->user->id]));
    }

    public function testCreateWithoutAuth()
    {
        $taskData = Task::factory()->make()->toArray();
        $response = $this->post(route('tasks.store'), $taskData);
        $response->assertStatus(403);
        $this->assertDatabaseMissing('tasks', $taskData);
    }

    public function testDestroyWithOwnerAuth()
    {
        $task = Task::factory()->create(['created_by_id' => $this->user->id]);
        $response = $this->actingAs($this->user)->delete(route('tasks.destroy', [$task]));
        $response->assertSessionHasNoErrors();
        $response->assertRedirect(route('tasks.index'));
        $this->assertDatabaseMissing('tasks', $task->only('id'));
    }

    public function testDestroyWithAlienAuth()
    {
        $task = Task::factory()->create(['created_by_id' => $this->user->id]);

        $response = $this->actingAs($this->alienUser)->delete(route('tasks.destroy', [$task]));
        $response->assertSessionHasNoErrors();
        $response->assertStatus(403);
        $this->assertDatabaseHas('tasks', $task->only('id'));
    }

    public function testDestroyWithoutAuth()
    {
        $task = Task::factory()->create();
        $response = $this->delete(route('tasks.destroy', [$task]));
        $response->assertSessionHasNoErrors();
        $response->assertStatus(403);
        $this->assertDatabaseHas('tasks', $task->only('id'));
    }

    public function testUpdateWithAuth()
    {
        $this->actingAs($this->user);
        $task = Task::factory()->create(['name' => 'Old name']);
        $data = Task::factory()->make()->only('name') + ['status_id' => $task->status_id];
        $response = $this->patch(route('tasks.update', [$task]), $data);
        $response->assertRedirect(route('tasks.index'));
        $this->assertDatabaseHas('tasks', $data);
    }

    public function testUpdateWithoutAuth()
    {
        $task = Task::factory()->create(['name' => 'Old name']);
        $data = Task::factory()->make()->only('name') + ['status_id' => $task->status_id];
        $response = $this->patch(route('tasks.update', [$task]), $data);
        $response->assertStatus(403);
        $this->assertDatabaseMissing('tasks', $data);
    }
}
